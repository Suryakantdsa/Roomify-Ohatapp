// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema for WhatsApp-like chat application
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rooms            RoomParticipant[]
  sentMessages     Message[]         @relation("SentMessages")
  receivedMessages Message[]         @relation("ReceivedMessages")
  groupsOwned      Room[]            @relation("RoomOwner")
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   Int? // Only for groups

  // Relations
  owner        User?             @relation("RoomOwner", fields: [ownerId], references: [id])
  participants RoomParticipant[]
  messages     Message[]
}

model RoomParticipant {
  id       Int      @id @default(autoincrement())
  userId   Int
  roomId   Int
  joinedAt DateTime @default(now())
  isAdmin  Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int? // For direct messages
  roomId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isRead     Boolean  @default(false)

  // Relations
  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])
  room     Room  @relation(fields: [roomId], references: [id])
}
